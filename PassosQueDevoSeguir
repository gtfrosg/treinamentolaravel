Quando eu estiver cloner localmente um repositório no github isso deve ser feito:

-git clone (aquele link do diretório no git) -> para ter o diretório localmente
-entrar na pasta do projeto -> para editar arquivo .env
-cp .env.example .env -> para copiar arquivo .env e depois edita-lo adicionando o banco de dados
-composer install -> para baixar as dependencias do projeto
-php artisan migrate -> para migrar o necessário relativamente ao projeto
-php artisan key:generate -> para funcionar o banco


-se o compando php artisan migrate não funcionar pode ser que seja por conta do fato haver um problema com a conecção do banco. o seguinte problema pode estar aparecendo:

➜  crud git:(master) ✗ php artisan migrate

   InvalidArgumentException 

  Database connection [mariadb] not configured.

  at vendor/laravel/framework/src/Illuminate/Database/DatabaseManager.php:161
    157▕         // If the configuration doesn't exist, we'll throw an exception and bail.
    158▕         $connections = $this->app['config']['database.connections'];
    159▕ 
    160▕         if (is_null($config = Arr::get($connections, $name))) {
  ➜ 161▕             throw new InvalidArgumentException("Database connection [{$name}] not configured.");
    162▕         }
    163▕ 
    164▕         return (new ConfigurationUrlParser)
    165▕                     ->parseConfiguration($config);

      +22 vendor frames 
  23  artisan:35
      Illuminate\Foundation\Console\Kernel::handle()

Se isso aparecer é porque você ainda não configurou o arquivo config/database.php do seu projeto ainda.

você deve abrir esse arquivo ele se apresentará da seguinte forma a você, a -> indica as linhas que você deve adicionar:

<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Database Connection Name
    |--------------------------------------------------------------------------
    |
    | Here you may specify which of the database connections below you wish
    | to use as your default connection for all database work. Of course
    | you may use many connections at once using the Database library.
    |
    */

    'default' => env('DB_CONNECTION', 'mysql'),

    /*
    |--------------------------------------------------------------------------
    | Database Connections
    |--------------------------------------------------------------------------
    |
    | Here are each of the database connections setup for your application.
    | Of course, examples of configuring each database platform that is
    | supported by Laravel is shown below to make development simple.
    |
    |
    | All database work in Laravel is done through the PHP PDO facilities
    | so make sure you have the driver for your particular database of
    | choice installed on your machine before you begin development.
    |
    */

    'connections' => [

        'sqlite' => [
            'driver' => 'sqlite',
            'url' => env('DATABASE_URL'),
            'database' => env('DB_DATABASE', database_path('database.sqlite')),
            'prefix' => '',
            'foreign_key_constraints' => env('DB_FOREIGN_KEYS', true),
        ],

        'mysql' => [
            'driver' => 'mysql',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'forge'),
            'username' => env('DB_USERNAME', 'forge'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => 'utf8mb4',
            'collation' => 'utf8mb4_unicode_ci',
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'pgsql' => [
            'driver' => 'pgsql',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '5432'),
            'database' => env('DB_DATABASE', 'forge'),
            'username' => env('DB_USERNAME', 'forge'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => 'utf8',
            'prefix' => '',
            'prefix_indexes' => true,
            'schema' => 'public',
            'sslmode' => 'prefer',
        ],

        'sqlsrv' => [
            'driver' => 'sqlsrv',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST', 'localhost'),
            'port' => env('DB_PORT', '1433'),
            'database' => env('DB_DATABASE', 'forge'),
            'username' => env('DB_USERNAME', 'forge'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => 'utf8',
            'prefix' => '',
            'prefix_indexes' => true,
        ]
-> ,
->
->        'mariadb' => [
->            'driver' => 'mysql',
->            'host' => env('DB_HOST', '127.0.0.1'),
->            'port' => env('DB_PORT', '3306'),
->            'database' => env('DB_DATABASE', 'your_database_name'),
->            'username' => env('DB_USERNAME', 'your_username'),
->            'password' => env('DB_PASSWORD', 'your_password'),
->            'unix_socket' => env('DB_SOCKET', ''),
->            'charset' => 'utf8',
->            'prefix' => '',
->            'strict' => true,
->            'engine' => null,
->        ]
->        //outras configurações de banco de dados, se necessário
    ],

    /*
    |--------------------------------------------------------------------------
    | Migration Repository Table
    |--------------------------------------------------------------------------
    |
    | This table keeps track of all the migrations that have already run for
    | your application. Using this information, we can determine which of
    | the migrations on disk haven't actually been run in the database.
    |
    |
    */

    'migrations' => 'migrations',

    /*
    |--------------------------------------------------------------------------
    | Redis Databases
    |--------------------------------------------------------------------------
    |
    | Redis is an open source, fast, and advanced key-value store that also
    | provides a richer body of commands than a typical key-value system
    | such as APC or Memcached. Laravel makes it easy to dig right in.
    |
    */

    'redis' => [

        'client' => env('REDIS_CLIENT', 'phpredis'),

        'options' => [
            'cluster' => env('REDIS_CLUSTER', 'redis'),
            'prefix' => env('REDIS_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_database_'),
        ],

        'default' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'password' => env('REDIS_PASSWORD', null),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_DB', '0'),
        ],

        'cache' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'password' => env('REDIS_PASSWORD', null),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_CACHE_DB', '1'),
        ],

    ],

];

-Após você adicionar essas linhas no seu arquivo config/database.php você estará apto para rodar o php artisan migrate
